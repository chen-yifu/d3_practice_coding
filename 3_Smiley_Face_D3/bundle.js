(function (d3) {
  'use strict';

  const svg = d3.select('svg');
  svg.style('background-color', '#96fab1');



  const height = svg.attr('height');
  const width = svg.attr('width');
  const eyeSpacing = 100;
  const eyeOffset = 80;
  const noseOffset = 20;
  const eyebrowWidth = 80;
  const eyebrowHeight = 15;
  const eyebrowOffset = -70;

  const g = svg.append('g')
  	.attr('transform', `translate(${width/2},${height/2})`);


  const circle = g.append('circle')
    .attr('r', height / 2)
  	.attr('fill','yellow')
  	.attr('stroke','black')
  	.attr('stroke-width','5px');

  const eyesG = g
  	.append('g')
  		.attr('transform', `translate(0,${-eyeOffset})`);

  const leftEye = eyesG
  	.append('circle')
      .attr('r', 40)
      .attr('cx', - eyeSpacing);


  const rightEye = eyesG
  	.append('circle')
      .attr('r', 40)
      .attr('cx', eyeSpacing);

  const eyebrowsG = eyesG
  	.append('g')
  		.attr('transform',`translate(0,${eyebrowOffset})`);

  eyebrowsG
  	.transition().duration(2000)
  		.attr('transform',`translate(0,${eyebrowOffset - 50})`)
  	.transition().duration(2000)
  		.attr('transform',`translate(0,${eyebrowOffset})`);

  const leftEyebrow = eyebrowsG
  	.append('rect')
      .attr('width', eyebrowWidth)
      .attr('height',eyebrowHeight)
      .attr('x', -eyeSpacing - eyebrowWidth/2);

  const rightEyebrow = eyebrowsG
  	.append('rect')
      .attr('width', eyebrowWidth)
      .attr('height',eyebrowHeight)
      .attr('x', eyeSpacing - eyebrowWidth/2)
  ;

  const mouth = g
  	.append('path')
      .attr('d', d3.arc()({
        innerRadius: 160,
        outerRadius: 170,
        startAngle: Math.PI/2,
        endAngle: Math.PI * 1.5
      }));

  const noseG = svg
  	.append('g')
      .attr('transform', `translate(${width/2},${height/2 + noseOffset})`);

  const nose = noseG
  	.append('path')
      .attr('d', d3.arc()({
        innerRadius: 30,
        outerRadius: 40,
        startAngle: 0,
        endAngle: Math.PI * 0.8
      }));

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCwgYXJjIH0gZnJvbSAnZDMnXG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnc3ZnJyk7XG5zdmcuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InLCAnIzk2ZmFiMScpO1xuXG5cblxuY29uc3QgaGVpZ2h0ID0gc3ZnLmF0dHIoJ2hlaWdodCcpO1xuY29uc3Qgd2lkdGggPSBzdmcuYXR0cignd2lkdGgnKTtcbmNvbnN0IGV5ZVNwYWNpbmcgPSAxMDA7XG5jb25zdCBleWVPZmZzZXQgPSA4MDtcbmNvbnN0IG1vdXRoT2Zmc2V0ID0gNTA7XG5jb25zdCBub3NlT2Zmc2V0ID0gMjA7XG5jb25zdCBleWVicm93V2lkdGggPSA4MDtcbmNvbnN0IGV5ZWJyb3dIZWlnaHQgPSAxNTtcbmNvbnN0IGV5ZWJyb3dPZmZzZXQgPSAtNzA7XG5cbmNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcblx0LmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt3aWR0aC8yfSwke2hlaWdodC8yfSlgKTtcblxuXG5jb25zdCBjaXJjbGUgPSBnLmFwcGVuZCgnY2lyY2xlJylcbiAgLmF0dHIoJ3InLCBoZWlnaHQgLyAyKVxuXHQuYXR0cignZmlsbCcsJ3llbGxvdycpXG5cdC5hdHRyKCdzdHJva2UnLCdibGFjaycpXG5cdC5hdHRyKCdzdHJva2Utd2lkdGgnLCc1cHgnKTtcblxuY29uc3QgZXllc0cgPSBnXG5cdC5hcHBlbmQoJ2cnKVxuXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHstZXllT2Zmc2V0fSlgKVxuXG5jb25zdCBsZWZ0RXllID0gZXllc0dcblx0LmFwcGVuZCgnY2lyY2xlJylcbiAgICAuYXR0cigncicsIDQwKVxuICAgIC5hdHRyKCdjeCcsIC0gZXllU3BhY2luZyk7XG5cblxuY29uc3QgcmlnaHRFeWUgPSBleWVzR1xuXHQuYXBwZW5kKCdjaXJjbGUnKVxuICAgIC5hdHRyKCdyJywgNDApXG4gICAgLmF0dHIoJ2N4JywgZXllU3BhY2luZyk7XG5cbmNvbnN0IGV5ZWJyb3dzRyA9IGV5ZXNHXG5cdC5hcHBlbmQoJ2cnKVxuXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLGB0cmFuc2xhdGUoMCwke2V5ZWJyb3dPZmZzZXR9KWApO1xuXG5leWVicm93c0dcblx0LnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDAwKVxuXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLGB0cmFuc2xhdGUoMCwke2V5ZWJyb3dPZmZzZXQgLSA1MH0pYClcblx0LnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDAwKVxuXHRcdC5hdHRyKCd0cmFuc2Zvcm0nLGB0cmFuc2xhdGUoMCwke2V5ZWJyb3dPZmZzZXR9KWApXG5cbmNvbnN0IGxlZnRFeWVicm93ID0gZXllYnJvd3NHXG5cdC5hcHBlbmQoJ3JlY3QnKVxuICAgIC5hdHRyKCd3aWR0aCcsIGV5ZWJyb3dXaWR0aClcbiAgICAuYXR0cignaGVpZ2h0JyxleWVicm93SGVpZ2h0KVxuICAgIC5hdHRyKCd4JywgLWV5ZVNwYWNpbmcgLSBleWVicm93V2lkdGgvMik7XG5cbmNvbnN0IHJpZ2h0RXllYnJvdyA9IGV5ZWJyb3dzR1xuXHQuYXBwZW5kKCdyZWN0JylcbiAgICAuYXR0cignd2lkdGgnLCBleWVicm93V2lkdGgpXG4gICAgLmF0dHIoJ2hlaWdodCcsZXllYnJvd0hlaWdodClcbiAgICAuYXR0cigneCcsIGV5ZVNwYWNpbmcgLSBleWVicm93V2lkdGgvMilcbjtcblxuY29uc3QgbW91dGggPSBnXG5cdC5hcHBlbmQoJ3BhdGgnKVxuICAgIC5hdHRyKCdkJywgYXJjKCkoe1xuICAgICAgaW5uZXJSYWRpdXM6IDE2MCxcbiAgICAgIG91dGVyUmFkaXVzOiAxNzAsXG4gICAgICBzdGFydEFuZ2xlOiBNYXRoLlBJLzIsXG4gICAgICBlbmRBbmdsZTogTWF0aC5QSSAqIDEuNVxuICAgIH0pKTtcblxuY29uc3Qgbm9zZUcgPSBzdmdcblx0LmFwcGVuZCgnZycpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt3aWR0aC8yfSwke2hlaWdodC8yICsgbm9zZU9mZnNldH0pYClcblxuY29uc3Qgbm9zZSA9IG5vc2VHXG5cdC5hcHBlbmQoJ3BhdGgnKVxuICAgIC5hdHRyKCdkJywgYXJjKCkoe1xuICAgICAgaW5uZXJSYWRpdXM6IDMwLFxuICAgICAgb3V0ZXJSYWRpdXM6IDQwLFxuICAgICAgc3RhcnRBbmdsZTogMCxcbiAgICAgIGVuZEFuZ2xlOiBNYXRoLlBJICogMC44XG4gICAgfSkpO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iXSwibmFtZXMiOlsic2VsZWN0IiwiYXJjIl0sIm1hcHBpbmdzIjoiOzs7RUFFQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQzFCLEdBQUcsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxDQUFDLENBQUM7Ozs7RUFJekMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUNsQyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ2hDLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQztFQUN2QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDckIsRUFDQSxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7RUFDdEIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0VBQ3hCLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztFQUN6QixNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQUUsQ0FBQzs7RUFFMUIsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDdkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMs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