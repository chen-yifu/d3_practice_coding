(function (d3) {
  'use strict';

  const svg = d3.select('svg');


  const height = +svg.attr('height');
  const width = +svg.attr('width');
  const circleRadius = 3;



  const render = data => {
    const xValue = d => d.year;
    const xAxisLabel = 'Year';
    const yValue = d => d.population;
    const yAxisLabel = 'Population Count';
    const title = 'World Population';
    const margin = {top: 70, right: 50, bottom: 90, left: 90};
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleTime()
    	.domain(d3.extent(data,xValue))
    	.range([0, innerWidth]);
    
    const yScale = d3.scaleLinear()
    	.domain([0,d3.max(data,yValue)])
    	.range([innerHeight,0]) // reversed
    	.nice();
    	

    
  	const g = svg.append('g')
    	.attr('transform',`translate(${margin.left},${margin.top})`);

  const xAxis = d3.axisBottom(xScale)
  	.tickSize(-innerHeight)
  	.tickPadding(20)
  	.ticks(7);
    
  const yAxisTickFormat = number => 
  	d3.format('.1s')(number)
  		.replace('G','B');

    
  const yAxis = d3.axisLeft(yScale)
  	.tickFormat(yAxisTickFormat)
    .tickSize(-innerWidth)
  	.tickPadding(10);
    
  const yAxisG = g.append('g').call(yAxis);
    
  yAxisG.selectAll('.domain').remove();
  yAxisG.append('text')
    .attr('class','axis-label')
    .attr('y',-50)
    .attr('x',-innerHeight/2)
    .attr('transform',`rotate(-90)`)
    .attr('fill','black')
    .attr('text-anchor','middle')
    .text(yAxisLabel);
    
  const xAxisG = g.append('g').call(xAxis)
    .attr('transform',`translate(0,${innerHeight})`);

  xAxisG.selectAll('.domain').remove();
  xAxisG.append('text')
    	.attr('class','axis-label')
    	.attr('y',70)
    	.attr('x',innerWidth/2)
    	.attr('fill','black')
    	.text(xAxisLabel);
    
    
    const areaGenerator = d3.area()
    	.x(d => xScale(xValue(d)))
    	.y0(innerHeight)
    	.y1(d => yScale(yValue(d)))
    	.curve(d3.curveBasis);
    
    g.append('path')
    	.attr('stroke','black')
    	.attr('class','line-path')
    	.attr('d', areaGenerator(data));
    
    
  	g.selectAll('circle').data(data)
    	.enter().append('circle')
    		.attr('cy', d => yScale(yValue(d)))
    		.attr('cx', d => xScale(xValue(d)))
    		.attr('r', circleRadius);
    
    g.append('text')
    	.attr('class','title')
    	.attr('y',-20)
    	.attr('x',innerWidth/2)
    	.attr('text-anchor','middle')	
    	.text(title);
    	

  };

  d3.csv('https://vizhub.com/curran/datasets/world-population-by-year-2015.csv')
    .then(data => {
      data.forEach(d => {
        d.population = +d.population;
        d.year = new Date(d.year);
      });
      render(data);
  	});

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxuICBcdFx0XHRzZWxlY3QsIFxuICAgICAgICBjc3YsIFxuICAgICAgICBzY2FsZUxpbmVhciwgXG4gICAgICAgIGV4dGVudCwgXG4gIFx0XHRcdHNjYWxlVGltZSxcbiAgICAgICAgbGluZSxcbiAgXHRcdFx0YXJlYSxcbiAgXHRcdFx0Y3VydmVCYXNpcyxcbiAgICAgICAgYXhpc0xlZnQsXG4gIFx0XHRcdGF4aXNCb3R0b20sXG4gIFx0XHRcdGZvcm1hdCxcbiAgXHRcdFx0bWF4XG59IGZyb20gJ2QzJ1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuXG5cbmNvbnN0IGhlaWdodCA9ICtzdmcuYXR0cignaGVpZ2h0Jyk7XG5jb25zdCB3aWR0aCA9ICtzdmcuYXR0cignd2lkdGgnKTtcbmNvbnN0IGNpcmNsZVJhZGl1cyA9IDM7XG5cblxuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgY29uc3QgeFZhbHVlID0gZCA9PiBkLnllYXI7XG4gIGNvbnN0IHhBeGlzTGFiZWwgPSAnWWVhcidcbiAgY29uc3QgeVZhbHVlID0gZCA9PiBkLnBvcHVsYXRpb247XG4gIGNvbnN0IHlBeGlzTGFiZWwgPSAnUG9wdWxhdGlvbiBDb3VudCdcbiAgY29uc3QgdGl0bGUgPSAnV29ybGQgUG9wdWxhdGlvbic7XG4gIGNvbnN0IG1hcmdpbiA9IHt0b3A6IDcwLCByaWdodDogNTAsIGJvdHRvbTogOTAsIGxlZnQ6IDkwfVxuICBjb25zdCBpbm5lcldpZHRoID0gd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgY29uc3QgaW5uZXJIZWlnaHQgPSBoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgXG4gIGNvbnN0IHhTY2FsZSA9IHNjYWxlVGltZSgpXG4gIFx0LmRvbWFpbihleHRlbnQoZGF0YSx4VmFsdWUpKVxuICBcdC5yYW5nZShbMCwgaW5uZXJXaWR0aF0pO1xuICBcbiAgY29uc3QgeVNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICBcdC5kb21haW4oWzAsbWF4KGRhdGEseVZhbHVlKV0pXG4gIFx0LnJhbmdlKFtpbm5lckhlaWdodCwwXSkgLy8gcmV2ZXJzZWRcbiAgXHQubmljZSgpO1xuICBcdFxuXG4gIFxuXHRjb25zdCBnID0gc3ZnLmFwcGVuZCgnZycpXG4gIFx0LmF0dHIoJ3RyYW5zZm9ybScsYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xuXG5jb25zdCB4QXhpcyA9IGF4aXNCb3R0b20oeFNjYWxlKVxuXHQudGlja1NpemUoLWlubmVySGVpZ2h0KVxuXHQudGlja1BhZGRpbmcoMjApXG5cdC50aWNrcyg3KTtcbiAgXG5jb25zdCB5QXhpc1RpY2tGb3JtYXQgPSBudW1iZXIgPT4gXG5cdGZvcm1hdCgnLjFzJykobnVtYmVyKVxuXHRcdC5yZXBsYWNlKCdHJywnQicpO1xuXG4gIFxuY29uc3QgeUF4aXMgPSBheGlzTGVmdCh5U2NhbGUpXG5cdC50aWNrRm9ybWF0KHlBeGlzVGlja0Zvcm1hdClcbiAgLnRpY2tTaXplKC1pbm5lcldpZHRoKVxuXHQudGlja1BhZGRpbmcoMTApO1xuICBcbmNvbnN0IHlBeGlzRyA9IGcuYXBwZW5kKCdnJykuY2FsbCh5QXhpcylcbiAgXG55QXhpc0cuc2VsZWN0QWxsKCcuZG9tYWluJykucmVtb3ZlKCk7XG55QXhpc0cuYXBwZW5kKCd0ZXh0JylcbiAgLmF0dHIoJ2NsYXNzJywnYXhpcy1sYWJlbCcpXG4gIC5hdHRyKCd5JywtNTApXG4gIC5hdHRyKCd4JywtaW5uZXJIZWlnaHQvMilcbiAgLmF0dHIoJ3RyYW5zZm9ybScsYHJvdGF0ZSgtOTApYClcbiAgLmF0dHIoJ2ZpbGwnLCdibGFjaycpXG4gIC5hdHRyKCd0ZXh0LWFuY2hvcicsJ21pZGRsZScpXG4gIC50ZXh0KHlBeGlzTGFiZWwpO1xuICBcbmNvbnN0IHhBeGlzRyA9IGcuYXBwZW5kKCdnJykuY2FsbCh4QXhpcylcbiAgLmF0dHIoJ3RyYW5zZm9ybScsYHRyYW5zbGF0ZSgwLCR7aW5uZXJIZWlnaHR9KWApXG5cbnhBeGlzRy5zZWxlY3RBbGwoJy5kb21haW4nKS5yZW1vdmUoKTtcbnhBeGlzRy5hcHBlbmQoJ3RleHQnKVxuICBcdC5hdHRyKCdjbGFzcycsJ2F4aXMtbGFiZWwnKVxuICBcdC5hdHRyKCd5Jyw3MClcbiAgXHQuYXR0cigneCcsaW5uZXJXaWR0aC8yKVxuICBcdC5hdHRyKCdmaWxsJywnYmxhY2snKVxuICBcdC50ZXh0KHhBeGlzTGFiZWwpO1xuICBcbiAgXG4gIGNvbnN0IGFyZWFHZW5lcmF0b3IgPSBhcmVhKClcbiAgXHQueChkID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxuICBcdC55MChpbm5lckhlaWdodClcbiAgXHQueTEoZCA9PiB5U2NhbGUoeVZhbHVlKGQpKSlcbiAgXHQuY3VydmUoY3VydmVCYXNpcyk7XG4gIFxuICBnLmFwcGVuZCgncGF0aCcpXG4gIFx0LmF0dHIoJ3N0cm9rZScsJ2JsYWNrJylcbiAgXHQuYXR0cignY2xhc3MnLCdsaW5lLXBhdGgnKVxuICBcdC5hdHRyKCdkJywgYXJlYUdlbmVyYXRvcihkYXRhKSk7XG4gIFxuICBcblx0Zy5zZWxlY3RBbGwoJ2NpcmNsZScpLmRhdGEoZGF0YSlcbiAgXHQuZW50ZXIoKS5hcHBlbmQoJ2NpcmNsZScpXG4gIFx0XHQuYXR0cignY3knLCBkID0+IHlTY2FsZSh5VmFsdWUoZCkpKVxuICBcdFx0LmF0dHIoJ2N4JywgZCA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKCdyJywgY2lyY2xlUmFkaXVzKVxuICBcbiAgZy5hcHBlbmQoJ3RleHQnKVxuICBcdC5hdHRyKCdjbGFzcycsJ3RpdGxlJylcbiAgXHQuYXR0cigneScsLTIwKVxuICBcdC5hdHRyKCd4Jyxpbm5lcldpZHRoLzIpXG4gIFx0LmF0dHIoJ3RleHQtYW5jaG9yJywnbWlkZGxlJylcdFxuICBcdC50ZXh0KHRpdGxlKTtcbiAgXHRcblxufTtcblxuY3N2KCdodHRwczovL3Zpemh1Yi5jb20vY3VycmFuL2RhdGFzZXRzL3dvcmxkLXBvcHVsYXRpb24tYnkteWVhci0yMDE1LmNzdicpXG4gIC50aGVuKGRhdGEgPT4ge1xuICAgIGRhdGEuZm9yRWFjaChkID0+IHtcbiAgICAgIGQucG9wdWxhdGlvbiA9ICtkLnBvcHVsYXRpb247XG4gICAgICBkLnllYXIgPSBuZXcgRGF0ZShkLnllYXIpO1xuICAgIH0pO1xuICAgIHJlbmRlcihkYXRhKTtcblx0fSk7XG5cblxuXG5cbiJdLCJuYW1lcyI6WyJzZWxlY3QiLCJzY2FsZVRpbWUiLCJleHRlbnQiLCJzY2FsZUxpbmVhciIsIm1heCIsImF4aXNCb3R0b20iLCJmb3JtYXQiLCJheGlzTGVmdCIsImFyZWEiLCJjdXJ2ZUJhc2lzIiwiY3N2Il0sIm1hcHBpbmdzIjoiOzs7RUFlQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7RUFHMUIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0VBQ25DLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNqQyxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7Ozs7RUFJdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJO0lBQ3JCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzNCLE1BQU0sVUFBVSxHQUFHLE9BQU07SUFDekIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDakMsTUFBTSxVQUFVLEdBQUcsbUJBQWtCO0lBQ3JDLE1BQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDO0lBQ2pDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUs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